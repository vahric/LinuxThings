To generate ssh key execute command like below ...

[root@ambari ~]# ssh-keygen 
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa): 
Created directory '/root/.ssh'.
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:OytWe6UlUuYsxsAPEIwMUs9zcAcMXpmkOVLgxHsMumo root@ambari
The key's randomart image is:
+---[RSA 2048]----+
|o=++===+.        |
|.o==o*+.         |
| .o+Oo.          |
|. ..o++   o      |
| . .   =S=       |
|.       B.+ o    |
|.      oo+ =     |
|.E    o .oo      |
|.    . ...       |
+----[SHA256]-----+

with -t parameter you can set different algorithm and key size like ;

ssh-keygen -t rsa -b 4096


    rsa - an old algorithm based on the difficulty of factoring large numbers. A key size of at least 2048 bits is recommended for RSA; 4096 bits is better. RSA is getting old and significant advances are being made in factoring. Choosing a different algorithm may be advisable. It is quite possible the RSA algorithm will become practically breakable in the foreseeable future. All SSH clients support this algorithm.
    dsa - an old US government Digital Signature Algorithm. It is based on the difficulty of computing discrete logarithms. A key size of 1024 would normally be used with it. DSA in its original form is no longer recommended.
    ecdsa - a new Digital Signature Algorithm standarized by the US government, using elliptic curves. This is probably a good algorithm for current applications. Only three key sizes are supported: 256, 384, and 521 (sic!) bits. We would recommend always using it with 521 bits, since the keys are still small and probably more secure than the smaller keys (even though they should be safe as well). Most SSH clients now support this algorithm.
    ed25519 - this is a new algorithm added in OpenSSH. Support for it in clients is not yet universal. Thus its use in general purpose applications may not yet be advisable.

with -f you could force the filename

with -C you could comment/tag it

To enable passwordless login to remote node use ssh-copy-id command like below

ssh-copy-id root@10.110.110.112

*with -i command you can specify file yourself
